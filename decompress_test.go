package dns

import "testing"

func TestDecompress(t *testing.T) {
	b := []byte{0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x3, 0x77, 0x77, 0x77,
		0x8, 0x73, 0x65, 0x6b, 0x69, 0x6d, 0x75, 0x72, 0x61,
		0x3, 0x6f, 0x72, 0x67,
		0x0,
		0x0, 0x1, 0x0, 0x1}

	qname, n := decompress(b, 12)
	if qname != "www.sekimura.org." {
		t.Errorf("expected name www.sekimura.org. but got %s", qname)
	}
	if n != 18 {
		t.Errorf("expected offset 18 but got %d", n)
	}

	// Example from "RFC 1035: 4.1.4. Message compression"
	b = []byte{
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,

		// 20
		0x1, 0x46, //F
		0x3, 0x49, 0x53, 0x49, //ISI
		0x4, 0x41, 0x52, 0x50, 0x41, //ARPA
		0x00,

		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,

		// 40
		0x3, 0x46, 0x4f, 0x4f, //FOO
		0xc0, 0x14, // pointer to 20

		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,

		// 64
		0xc0, 0x1a, // pointer to 26

		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,

		0x0,
	}

	// The domain name for F.ISI.ARPA is shown at offset 20.  The domain name
	// FOO.F.ISI.ARPA is shown at offset 40; this definition uses a pointer to
	// concatenate a label for FOO to the previously defined F.ISI.ARPA.  The
	// domain name ARPA is defined at offset 64 using a pointer to the ARPA
	// component of the name F.ISI.ARPA at 20; note that this pointer relies on
	// ARPA being the last label in the string at 20.  The root domain name is
	// defined by a single octet of zeros at 92; the root domain name has no
	// labels.

	qname, n = decompress(b, 40)
	if qname != "FOO.F.ISI.ARPA." {
		t.Error(qname, n)
	}
	qname, n = decompress(b, 64)
	if qname != "ARPA." {
		t.Error(qname, n)
	}

	qname, n = decompress(b, 92)
	if qname != "" {
		t.Error(qname, n)
	}
}
